package thinkgeardemo;

import java.io.*;
import java.applet.Applet;
import processing.core.PApplet;
import processing.core.PFont;
import neurosky.*;
import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.image.BufferedImage;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Panel;
import java.awt.image.*;
import javax.imageio.*;
import java.awt.*;
import org.json.*;

public class ThinkGearDemo extends PApplet {
	
	public ThinkGearSocket neuroSocket;
	public int attention=10;
	public int meditation=10;
	public PFont font;
	public int Delta = 10;
	public int Theta = 10;
	public int High_alpha = 10;
	public int Low_alpha = 10;
	public int High_beta =10;
    public int Low_beta = 10;
    public int Mid_gamma = 10;
    public int Low_gamma = 10;
    public static final int DELTA = 1;
    public static final int ARC_ANGLE = 20;
    public static final int PREF_W = 1000;
    public static final int PREF_H = PREF_W;
    public static final int LOOP_MAX = 100000;

	public void setup() {
	  size(1000,800);

	  ThinkGearSocket neuroSocket = new ThinkGearSocket(this);
	  try {
	    neuroSocket.start();
	  } 
	  catch (Exception e) {
	    println("Is ThinkGear running??");
	  }
	  smooth();
	  //noFill();
	  font = createFont("Verdana",12);
	  textFont(font);
	}
	public static int RGB;
	
    public static int myColor(int Alpha, int R, int G, int B){
        RGB = (16777216 * Alpha) + (65536 * R) + (256 * G) + (B);
        return RGB;
    }

	 public void paint(Graphics g){
		 
		 try {

		 
         BufferedImage img = ImageIO.read(new File( "C:\\Users\\yook\\workspace\\Copy of ChangePictureWithMindwave\\real.jpg"));

         BufferedImage t= new BufferedImage( img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_ARGB );

         int clear=0x000000FF;
         int color, alpha, R, G, B;

         for(int i=0; i<img.getWidth(); ++i){
             for( int j=0; j<img.getHeight(); ++j ){
                 g.drawImage(img,0,0,null);
                 color = img.getRGB(i,j);
                 alpha = (color>>24) & 0xff;
                 R = (color & 0x00ff0000) >> 16;
                 G = (color & 0x0000ff00) >> 8;
                 B = color & 0x000000ff; 
                 
                 if(Delta<100000)
                 {
                	 B = 0;
                	 G = 0;
                 }
                 else if(Delta < 1000000)
                 {
                	 R = 0;
                 }
                 
                 t.setRGB( i,j, myColor(alpha,R,G,B));
                 g.drawImage(t, img.getWidth()+10, 0, null);
                 
                 try{
  				   Thread.sleep(1);
  				  }catch(Exception ee){
  				   
  				  } 
             } 
         } //for
         
         ImageIO.write( t, "jpg", new File(" sT.jpg") );
	        } catch (IOException e){ e.printStackTrace(); }

		  }


	public void poorSignalEvent(int sig) {
	 // println("SignalEvent "+sig);
	}


	    
	public void attentionEvent(int attentionLevel) {
	 // println("Attention Level: " + attentionLevel);
	  attention = attentionLevel;
	}


	public void meditationEvent(int meditationLevel) {
	 // println("Meditation Level: " + meditationLevel);
	  meditation = meditationLevel;
	}

	public void blinkEvent(int blinkStrength) {

	 // println("blinkStrength: " + blinkStrength);
	}

	 public void eegEvent(int delta, int theta, int low_alpha, int high_alpha, int low_beta, int high_beta, int low_gamma, int mid_gamma) {

		 println("delta Level: " + delta);
	     Delta = delta;
	     Theta = theta;
	     Low_alpha = low_alpha;
	     High_alpha = high_alpha;
	     Low_beta = low_beta;
	     High_beta = high_beta;
	     Low_gamma = low_gamma;
	     Mid_gamma = mid_gamma;
	}

	void rawEvent(int[] raw) {
	  println("rawEvent Level: " + raw);
	}	

	public void stop() {
	  neuroSocket.stop();
	  super.stop();
	}

	
	
	public static void main(String _args[]) {
		PApplet.main(new String[] { thinkgeardemo.ThinkGearDemo.class.getName() });


	}
}
